import express from "express";
import bcrypt from "bcrypt";
import crypto from "crypto";
import User from "../models/User.js";
import session from "express-session";
import transporter from "../config/emailConfig.js";

const router = express.Router();

// --- Middleware session (n·∫øu ch∆∞a setup ·ªü server.js) ---
router.use(
  session({
    secret: process.env.SESSION_SECRET || "some_secret_key",
    resave: false,
    saveUninitialized: true,
    cookie: { secure: false }, // secure:true n·∫øu d√πng HTTPS
  })
);

// ------------------- REGISTER -------------------
router.post("/register", async (req, res) => {
  try {
    const { name, email, password } = req.body;

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
    const exist = await User.findOne({ email });
    if (exist) return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i" });

    // Hash password
    const hashedPassword = await bcrypt.hash(password, 10);
    const verificationToken = crypto.randomBytes(32).toString("hex");

    // T·∫°o user m·ªõi
    const user = await User.create({
      name,
      email,
      password: hashedPassword,
      picture: `${process.env.FRONTEND_URL}/avatar/avatar-default-register.jpg`,
      verificationToken,
      isVerified: false,
    });

    // URL x√°c th·ª±c
    const verifyURL = `${process.env.FRONTEND_URL}/verify/${verificationToken}`;

    // G·ª≠i email x√°c th·ª±c
    await transporter.sendMail({
      from: `"Tez Movies" <${process.env.EMAIL_USER}>`,
      to: email,
      subject: "X√°c nh·∫≠n t√†i kho·∫£n - Tez Movies",
      html: `
        <div style="max-width: 600px; margin: 0 auto; padding: 20px; font-family: Arial, sans-serif;">
          <h2>Xin ch√†o ${name}!</h2>
          <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i <strong>Tez Movies</strong>.</p>
          <p>Nh·∫•n n√∫t b√™n d∆∞·ªõi ƒë·ªÉ x√°c nh·∫≠n t√†i kho·∫£n:</p>
          <div style="text-align:center; margin:20px 0;">
            <a href="${verifyURL}" 
               style="background:#007bff; color:white; padding:12px 30px; text-decoration:none; border-radius:5px;">
               X√°c nh·∫≠n t√†i kho·∫£n
            </a>
          </div>
          <p>Ho·∫∑c copy link n√†y v√†o tr√¨nh duy·ªát: <a href="${verifyURL}">${verifyURL}</a></p>
        </div>
      `,
    });

    res.json({
      message: "ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c nh·∫≠n.",
      email,
    });
  } catch (err) {
    console.error("‚ùå Register error:", err);
    res.status(500).json({ message: "L·ªói server khi ƒëƒÉng k√Ω", error: err.message });
  }
});

// ------------------- VERIFY EMAIL -------------------
router.get("/verify/:token", async (req, res) => {
  try {
    const { token } = req.params;
    const user = await User.findOne({ verificationToken: token });

    if (!user) return res.status(400).json({ message: "Token x√°c th·ª±c kh√¥ng h·ª£p l·ªá" });

    user.isVerified = true;
    user.verificationToken = undefined;
    await user.save();

    res.json({
      message: "X√°c nh·∫≠n email th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p.",
      user: { name: user.name, email: user.email },
    });
  } catch (err) {
    console.error("‚ùå Verify error:", err);
    res.status(500).json({ message: "L·ªói server khi x√°c th·ª±c email" });
  }
});

// ------------------- LOGIN -------------------
router.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;
    console.log("üîë Login attempt for:", email);

    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ message: "Email ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω" });

    if (!user.isVerified)
      return res.status(400).json({ message: "Email ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c" });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ message: "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });

    // --- T·∫°o session ---
    req.session.user = {
      userId: user._id,
      name: user.name,
      email: user.email,
      picture: user.picture,
    };

    console.log("üë§ User logged in - Session:", req.session.user);

    res.json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
      user: req.session.user,
    });
  } catch (err) {
    console.error("‚ùå Login error:", err);
    res.status(500).json({ message: "L·ªói server khi ƒëƒÉng nh·∫≠p" });
  }
});

// ------------------- LOGOUT -------------------
router.post("/logout", (req, res) => {
  req.session.destroy((err) => {
    if (err) return res.status(500).json({ message: "Kh√¥ng th·ªÉ ƒëƒÉng xu·∫•t" });
    res.clearCookie("connect.sid");
    res.json({ message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng" });
  });
});

// ------------------- TEST ROUTE -------------------
router.get("/test", (req, res) => {
  res.json({
    message: "Auth routes working!",
    timestamp: new Date().toISOString(),
    routes: ["POST /register", "GET /verify/:token", "POST /login", "POST /logout"],
  });
});

export default router;
