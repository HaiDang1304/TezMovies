import express from "express";
import bcrypt from "bcrypt";
import crypto from "crypto";
import User from "../models/User.js";
import jwt from "jsonwebtoken";
// Import transporter t·ª´ config
import transporter from "../config/emailConfig.js";

const router = express.Router();

router.post("/register", async (req, res) => {
  try {
    const { name, email, password } = req.body;

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
    const exist = await User.findOne({ email });
    if (exist) {
      return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i" });
    }

    // Hash password
    const hashedPassword = await bcrypt.hash(password, 10);
    const verificationToken = crypto.randomBytes(32).toString("hex");

    // T·∫°o user m·ªõi
    const user = await User.create({
      name,
      email,
      password: hashedPassword,
      verificationToken,
      isVerified: false,
    });

    // URL x√°c th·ª±c
    const verifyURL = `${process.env.FRONTEND_URL}/verify/${verificationToken}`;

    // G·ª≠i email x√°c th·ª±c
    await transporter.sendMail({
      from: `"Tez Movies" <${process.env.EMAIL_USER}>`,
      to: email,
      subject: "X√°c nh·∫≠n t√†i kho·∫£n - Tez Movies",
      html: `
        <div style="max-width: 600px; margin: 0 auto; padding: 20px; font-family: Arial, sans-serif;">
          <h2 style="color: #333;">Xin ch√†o ${name}!</h2>
          <p style="color: #666; line-height: 1.6;">
            C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i <strong>Tez Movies</strong>.
          </p>
          <p style="color: #666; line-height: 1.6;">
            Vui l√≤ng nh·∫•n v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ x√°c nh·∫≠n t√†i kho·∫£n c·ªßa b·∫°n:
          </p>
          <div style="text-align: center; margin: 30px 0;">
            <a href="${verifyURL}" 
               style="background: #007bff; color: white; padding: 12px 30px; 
                      text-decoration: none; border-radius: 5px; display: inline-block;">
              X√°c nh·∫≠n t√†i kho·∫£n
            </a>
          </div>
          <p style="color: #999; font-size: 12px; margin-top: 30px;">
            Ho·∫∑c copy link n√†y v√†o tr√¨nh duy·ªát: <br>
            <a href="${verifyURL}">${verifyURL}</a>
          </p>
          <hr style="border: none; border-top: 1px solid #eee; margin: 20px 0;">
          <p style="color: #999; font-size: 12px;">
            Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª´ Tez Movies. N·∫øu b·∫°n kh√¥ng ƒëƒÉng k√Ω, vui l√≤ng b·ªè qua email n√†y.
          </p>
        </div>
      `,
    });
    
    res.json({ 
      message: "ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c nh·∫≠n.",
      email: email
    });
  } catch (err) {
    console.error("‚ùå Register error:", err);
    res.status(500).json({ 
      message: "L·ªói server khi ƒëƒÉng k√Ω. Vui l√≤ng th·ª≠ l·∫°i.",
      error: process.env.NODE_ENV === "development" ? err.message : undefined
    });
  }
});

router.get("/verify/:token", async (req, res) => {
  try {
    const token = req.params.token;
    console.log("üîç Verify request received:");
    console.log("  - Token from params:", token);
    console.log("  - Token length:", token.length);
    console.log("  - Request URL:", req.originalUrl);
    console.log("  - Request method:", req.method);
    
    const user = await User.findOne({ verificationToken: token });

    if (!user) {
      return res.status(400).json({ 
        message: "Token x√°c th·ª±c kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.",
        error: "INVALID_TOKEN"
      });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i x√°c th·ª±c
    user.isVerified = true;
    user.verificationToken = undefined;
    await user.save();

    res.json({ 
      message: "X√°c nh·∫≠n email th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p.",
      user: { name: user.name, email: user.email }
    });
  } catch (err) {
    console.error("‚ùå Verify error:", err);
    res.status(500).json({ message: "L·ªói server khi x√°c th·ª±c email" });
  }
});

router.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;
    console.log("üîë Login attempt for:", email);
    
    // T√¨m user theo email
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ message: "Email ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω" });
    }

    // Ki·ªÉm tra email ƒë√£ x√°c th·ª±c ch∆∞a
    if (!user.isVerified) {
      return res.status(400).json({ 
        message: "Email ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c. Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c nh·∫≠n t√†i kho·∫£n." 
      });
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });
    }

    // T·∫°o session - L∆ØU USER V√ÄO SESSION
    req.session.userId = user._id;
    req.session.user = {
      id: user._id,
      name: user.name,
      email: user.email,
      picture: user.picture
    };

    console.log("üîë User logged in - Session created:", req.session.id);
    console.log("üë§ User data in session:", req.session.user);
    
    res.json({ 
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", 
      user: {
        id: user._id,
        name: user.name,
        email: user.email,
        picture: user.picture
      }
    });

  } catch (err) {
    console.error("‚ùå Login error:", err);
    res.status(500).json({ message: "L·ªói server khi ƒëƒÉng nh·∫≠p" });
  }
});

// Route logout
router.post("/logout", (req, res) => {
  req.session.destroy((err) => {
    if (err) {
      return res.status(500).json({ message: "Kh√¥ng th·ªÉ ƒëƒÉng xu·∫•t" });
    }
    res.clearCookie('connect.sid'); // X√≥a session cookie
    res.json({ message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng" });
  });
});

// Route test (ƒë·ªÉ debug)
router.get("/test", (req, res) => {
  res.json({ 
    message: "Auth routes working!", 
    timestamp: new Date().toISOString(),
    routes: ["POST /register", "GET /verify/:token", "POST /login", "POST /logout"]
  });
});

export default router;